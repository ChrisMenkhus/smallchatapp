{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["socket","io","connect","Style","styled","div","App","useState","message","name","myState","setMyState","chat","setChat","useEffect","console","log","on","className","onSubmit","e","preventDefault","emit","value","onChange","target","label","map","index","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"qYAKA,IAAMA,E,OAASC,EAAGC,QAAQ,0CAGpBC,EAAQC,IAAOC,IAAV,KAyEIC,MAnEf,WAAgB,IAAD,EACiBC,mBAAS,CAACC,QAAS,GAAIC,KAAM,KAD9C,mBACNC,EADM,KACGC,EADH,OAEWJ,mBAAS,CAC/B,CAACC,QAAS,MAAOC,KAAM,SACvB,CAACD,QAAS,MAAOC,KAAM,WAJZ,mBAENG,EAFM,KAEAC,EAFA,KAkCb,OA1BAC,qBAAU,WACRC,QAAQC,IAAIhB,KACXA,GAGHc,qBAAU,WACRd,EAAOiB,GAAG,WAAW,YAAsB,IAApBR,EAAmB,EAAnBA,KAAMD,EAAa,EAAbA,QAC3BK,EAAQ,GAAD,mBAAKD,GAAL,CAAW,CAACH,OAAMD,oBAoB3B,kBAACL,EAAD,mBAGE,yBAAKe,UAAU,QACb,0BAAMC,SApBY,SAACC,GACvBA,EAAEC,iBAD2B,IAEtBZ,EAAiBC,EAAjBD,KAAMD,EAAWE,EAAXF,QACbR,EAAOsB,KAAK,UAAW,CAACb,OAAMD,YAC9BG,EAAW,CAACH,QAAS,GAAIC,WAiBnB,yCACA,yBAAKS,UAAU,cACb,2BAAOT,KAAK,OACZc,MAAOb,EAAQD,KACfe,SAAU,SAACJ,GAAD,OAAKT,EAAW,2BAAID,GAAL,IAAcD,KAAMW,EAAEK,OAAOF,UACtDG,MAAM,UAGR,yBAAKR,UAAU,iBACb,2BAAOT,KAAK,UACZc,MAAOb,EAAQF,QACfgB,SAAU,SAACJ,GAAD,OAAKT,EAAW,2BAAID,GAAL,IAAcF,QAASY,EAAEK,OAAOF,UACzDG,MAAM,aAGR,iDAGF,yBAAKR,UAAU,eACb,wCAhCCN,EAAKe,KAAI,WAAkBC,GAAlB,IAAEnB,EAAF,EAAEA,KAAMD,EAAR,EAAQA,QAAR,OACd,yBAAKqB,IAAKD,GACR,4BAAKnB,EAAL,KAAY,8BAAOD,YC/BPsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMvC,c","file":"static/js/main.4ad0a955.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport styled from 'styled-components';\nimport io from 'socket.io-client';\n// const socket = io.connect('http://localhost:4000');\n\nconst socket = io.connect('https://test-chatapp.azurewebsites.net');\n\n\nconst Style = styled.div`\n  height: 100vh;\n  display: grid;\n  place-items: center;\n`;\n\nfunction App() {\n  const [myState, setMyState] = useState({message: '', name: ''});\n  const [chat, setChat] = useState([\n    {message: 'one', name: 'chris'},\n    {message: 'two', name: 'world'}\n  ]);\n\n\n  useEffect(()=> {\n    console.log(socket)\n  }, socket)\n\n\n  useEffect(()=> {\n    socket.on('message', ({name, message}) => {\n      setChat([...chat, {name, message}])\n    })\n  })\n\n  const onMessageSubmit = (e) => {\n    e.preventDefault();\n    const {name, message} = myState;\n    socket.emit('message', {name, message});\n    setMyState({message: '', name})\n  }\n\n  const renderChat = () => {\n    return chat.map(({name, message}, index) => (\n      <div key={index}>\n        <h3>{name}: <span>{message}</span></h3>\n      </div>\n    ))\n  }\n\n  return (\n    <Style>\n      hello world\n\n      <div className='card'>\n        <form onSubmit={onMessageSubmit}>\n          <h1>messenger</h1>\n          <div className='name-field'>\n            <input name='name' \n            value={myState.name} \n            onChange={(e)=>setMyState({...myState, name: e.target.value})}\n            label='Name'\n            />\n          </div>\n          <div className='message-field'>\n            <input name='message' \n            value={myState.message} \n            onChange={(e)=>setMyState({...myState, message: e.target.value})}\n            label='Message'\n            />\n          </div>\n          <button>send message</button>\n        </form>\n\n        <div className='render-chat'>\n          <h1>Chat Log</h1>\n          {renderChat()}\n        </div>\n      </div>\n    </Style>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport style from './index.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}